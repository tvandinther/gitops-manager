// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: service.proto

package gitops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GitOps_UpdateManifests_FullMethodName = "/gitops.GitOps/UpdateManifests"
)

// GitOpsClient is the client API for GitOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitOpsClient interface {
	UpdateManifests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ManifestRequest, ManifestResponse], error)
}

type gitOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewGitOpsClient(cc grpc.ClientConnInterface) GitOpsClient {
	return &gitOpsClient{cc}
}

func (c *gitOpsClient) UpdateManifests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ManifestRequest, ManifestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GitOps_ServiceDesc.Streams[0], GitOps_UpdateManifests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ManifestRequest, ManifestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GitOps_UpdateManifestsClient = grpc.BidiStreamingClient[ManifestRequest, ManifestResponse]

// GitOpsServer is the server API for GitOps service.
// All implementations must embed UnimplementedGitOpsServer
// for forward compatibility.
type GitOpsServer interface {
	UpdateManifests(grpc.BidiStreamingServer[ManifestRequest, ManifestResponse]) error
	mustEmbedUnimplementedGitOpsServer()
}

// UnimplementedGitOpsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGitOpsServer struct{}

func (UnimplementedGitOpsServer) UpdateManifests(grpc.BidiStreamingServer[ManifestRequest, ManifestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateManifests not implemented")
}
func (UnimplementedGitOpsServer) mustEmbedUnimplementedGitOpsServer() {}
func (UnimplementedGitOpsServer) testEmbeddedByValue()                {}

// UnsafeGitOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitOpsServer will
// result in compilation errors.
type UnsafeGitOpsServer interface {
	mustEmbedUnimplementedGitOpsServer()
}

func RegisterGitOpsServer(s grpc.ServiceRegistrar, srv GitOpsServer) {
	// If the following call pancis, it indicates UnimplementedGitOpsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GitOps_ServiceDesc, srv)
}

func _GitOps_UpdateManifests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GitOpsServer).UpdateManifests(&grpc.GenericServerStream[ManifestRequest, ManifestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GitOps_UpdateManifestsServer = grpc.BidiStreamingServer[ManifestRequest, ManifestResponse]

// GitOps_ServiceDesc is the grpc.ServiceDesc for GitOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitops.GitOps",
	HandlerType: (*GitOpsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateManifests",
			Handler:       _GitOps_UpdateManifests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
